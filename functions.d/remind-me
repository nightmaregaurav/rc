# Simple reminder script that uses `at` or `systemd-run` to schedule reminders.
alias remind-me=remind_me
remind_me() {
  if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: remind-me to \"<message>\" at HH:MM [on DD/MM or DD/MM/YYYY]"
    echo
    echo "Sets a reminder with the specified message at the given time and date."
    echo
    echo "Flags:"
    echo "  --help              Display this help message."
    echo "  to <Message>        Sets a reminder with the specified message."
    echo "  at <Time>           Sets the time for the reminder. Cannot be used together with 'after or 'in'"
    echo "  on <Date>           Sets the date for the reminder. Cannot be used together with 'after' or 'in'"
    echo "  after <Duration>    Sets the duration for the reminder. Cannot be used together with 'at' or 'on'"
    echo "  in <Duration>       Alias for 'after'."
    echo
    echo "Examples:"
    echo "  remind-me to \"Meeting with Bob\" at 14:30 on 25/12"
    echo "  remind-me to \"Meeting with Alice\" after 1 hour"
    return 0
  fi

  local message=""
  local at_time=""
  local on_date=""
  local after_duration=""
  local seen_to=0
  local seen_at=0
  local seen_on=0
  local seen_after=0
  local seen_in=0
  local log_file="$HOME/.remind-me.log"

  while [[ $# -gt 0 ]]; do
    case "$1" in
      to)
        if ((seen_to)); then
          echo "Error: 'to' flag specified more than once."
          return 1
        fi
        seen_to=1
        shift
        while [[ $# -gt 0 && "$1" != "at" && "$1" != "on" && "$1" != "after" && "$1" != "in" ]]; do
          message+="$1 "
          shift
        done
        ;;
      at)
        if ((seen_at)); then
          echo "Error: 'at' flag specified more than once."
          return 1
        fi
        if ((seen_after)); then
          echo "Error: 'at' and 'after' flags cannot be used together."
          return 1
        fi
        if ((seen_in)); then
          echo "Error: 'at' and 'in' flags cannot be used together."
          return 1
        fi
        seen_at=1
        at_time="$2"
        shift 2
        ;;
      on)
        if ((seen_on)); then
          echo "Error: 'on' flag specified more than once."
          return 1
        fi
        if ((seen_after)); then
          echo "Error: 'on' and 'after' flags cannot be used together."
          return 1
        fi
        if ((seen_in)); then
          echo "Error: 'on' and 'in' flags cannot be used together."
          return 1
        fi
        seen_on=1
        on_date="$2"
        shift 2
        ;;
      after)
        if ((seen_after)); then
          echo "Error: 'after' flag specified more than once."
          return 1
        fi
        if ((seen_in)); then
          echo "Error: 'after' and 'in' flags cannot be used together."
          return 1
        fi
        if ((seen_at)); then
          echo "Error: 'after' and 'at' flags cannot be used together."
          return 1
        fi
        if ((seen_on)); then
          echo "Error: 'after' and 'on' flags cannot be used together."
          return 1
        fi
        seen_after=1
        after_duration="$2 $3"
        shift 3
        ;;
      in)
        if ((seen_in)); then
          echo "Error: 'in' flag specified more than once."
          return 1
        fi
        if ((seen_after)); then
          echo "Error: 'after' and 'in' flags cannot be used together."
          return 1
        fi
        if ((seen_at)); then
          echo "Error: 'in' and 'at' flags cannot be used together."
          return 1
        fi
        if ((seen_on)); then
          echo "Error: 'in' and 'on' flags cannot be used together."
          return 1
        fi
        seen_in=1
        after_duration="$2 $3"
        shift 3
        ;;
      *)
        echo "Unknown argument: $1"
        return 1
        ;;
    esac
  done

  message=$(echo "$message" | sed 's/ *$//')
  if [[ -z "$message" ]]; then
    echo "Message cannot be empty."
    return 1
  fi

  if [[ -z "$at_time" && -z "$after_duration" ]]; then
    echo "Either 'at', 'in' or 'after' flag must be provided."
    return 1
  fi

  # Normalize time format (e.g., 8:41AM â†’ 08:41 AM)
  at_time=$(echo "$at_time" | sed -E 's/([0-9]{1,2}):([0-9]{2})([AaPp][Mm])/\1:\2 \3/')

  if [[ -n "$after_duration" ]]; then
    datetime_str=$(date -d "now + $after_duration" "+%Y-%m-%d %H:%M" 2>/dev/null)
    on_date=$(date -d "$datetime_str" "+%d/%m/%Y")
    at_time=$(date -d "$datetime_str" "+%H:%M")
    IFS='/' read -r day month year <<< "$on_date"
    iso_date="$year-$month-$day"
  fi

  if [[ -z "$on_date" ]]; then
    on_date=$(date +%d/%m/%Y)
  elif [[ "$on_date" =~ ^[0-9]{2}/[0-9]{2}$ ]]; then
    on_date="$on_date/$(date +%Y)"
  fi

  IFS='/' read -r day month year <<< "$on_date"
  iso_date="$year-$month-$day"

  if [[ -z "$datetime_str" ]]; then
    echo "Invalid date/time"
    return 1
  fi

  target_ts=$(date -d "$datetime_str" +%s)
  now_ts=$(date +%s)
  wait_secs=$((target_ts - now_ts))

  if [[ $wait_secs -le 0 ]]; then
    echo "Time already passed for '$datetime_str'"
    return 1
  fi

  local mins=$((wait_secs / 60))
  local secs=$((wait_secs % 60))
  echo "Reminder set: \"$message\" at $at_time on $on_date (in ${mins}m ${secs}s)"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Scheduled: \"$message\" at $datetime_str" >> "$log_file"

  local reminder_cmd=$(cat <<EOF
#!/usr/bin/env bash
if command -v notify-send >/dev/null; then
  notify-send "Reminder" "$message"
elif command -v spd-say >/dev/null; then
  spd-say "$message"
fi
echo "[Reminder] $message"
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Triggered: \"$message\"" >> "$log_file"
EOF
)

  if command -v at >/dev/null; then
    echo "$reminder_cmd" | at "$at_time" "$month/$day/$year" >/dev/null 2>&1
    if [[ ${PIPESTATUS[1]} -ne 0 ]]; then
      echo "Failed to schedule reminder with 'at'."
      return 1
    fi
  elif command -v systemd-run >/dev/null; then
    echo "$reminder_cmd" | systemd-run --on-calendar="$datetime_str" --unit="reminder-$(date +%s)" bash >/dev/null 2>&1
    if [[ ${PIPESTATUS[1]} -ne 0 ]]; then
      echo "Failed to schedule reminder with 'systemd-run'."
      return 1
    fi
  else
    nohup bash -c "sleep $wait_secs; $reminder_cmd" >/dev/null 2>&1 &
    if [[ $? -ne 0 ]]; then
      echo "Failed to schedule reminder with 'nohup'."
      return 1
    fi
  fi
}


_remind_me_completion() {
  local cur prev
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  local seen_help=0 seen_to=0 seen_at=0 seen_on=0 seen_after=0 seen_in=0

  for word in "${COMP_WORDS[@]}"; do
    case "$word" in
      --help) seen_help=1 ;;
      to) seen_to=1 ;;
      at) seen_at=1 ;;
      on) seen_on=1 ;;
      after) seen_after=1 ;;
      in) seen_in=1 ;;
    esac
  done

  if [[ "$prev" =~ ^[0-9]+$ && "${COMP_WORDS[COMP_CWORD-2]}" =~ ^(after|in)$ ]]; then
    if [[ "$prev" == "1" ]]; then
      COMPREPLY=( $(compgen -W "minute hour day" -- "$cur") )
    else
      COMPREPLY=( $(compgen -W "minutes hours days" -- "$cur") )
    fi
    return
  fi

  case "${prev}" in
    --help) COMPREPLY=(); return ;;
    to) COMPREPLY=(); return ;;
    at)
      local current_time=$(date +%H:%M)
      local time_entries=($(for i in {1..12}; do date -d "$current_time $((i * 15)) minutes" +"%H:%M"; done))
      COMPREPLY=( "${time_entries[@]}" )
      return
      ;;
    on)
      local dates=()
      for i in {0..6}; do
        dates+=( "$(date -d "+$i day" +%d/%m)" )
      done
      COMPREPLY=( $(compgen -W "${dates[*]}" -- "$cur") )
      return
      ;;
    after)
      local numbers=()
      for i in {1..9}; do
        numbers+=( "$i" )
      done
      COMPREPLY=( $(compgen -W "${numbers[*]}" -- "$cur") )
      return
      ;;
    in)
      local numbers=()
      for i in {1..9}; do
        numbers+=( "$i" )
      done
      COMPREPLY=( $(compgen -W "${numbers[*]}" -- "$cur") )
      return
      ;;
  esac

  local options=""
  [[ $seen_to -eq 0 ]] && options+=" to"
  [[ $seen_after -eq 0 ]] && [[ $seen_in -eq 0 ]] && [[ $seen_at -eq 0 ]] && options+=" at"
  [[ $seen_after -eq 0 ]] && [[ $seen_in -eq 0 ]] && [[ $seen_on -eq 0 ]] && options+=" on"
  [[ $seen_in -eq 0 ]] && [[ $seen_after -eq 0 ]] && [[ $seen_on -eq 0 ]] && [[ $seen_at -eq 0 ]] && options+=" after"
  [[ $seen_in -eq 0 ]] && [[ $seen_after -eq 0 ]] && [[ $seen_on -eq 0 ]] && [[ $seen_at -eq 0 ]] && options+=" in"

  if [[ $seen_to -ne 1 && $seen_at -ne 1 && $seen_on -ne 1 ]]; then
    options+=" --help"
  fi

  COMPREPLY=( $(compgen -W "$options" -- "$cur") )
}
complete -F _remind_me_completion remind_me

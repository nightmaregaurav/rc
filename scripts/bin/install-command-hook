#!/usr/bin/env bash
set -e

if [[ "$1" == "--help" || "$1" == "-h" || -z "$1" ]]; then
  echo "Usage: $0 <file_path>"
  echo
  echo "Installs a persistent service that monitors <file_path>."
  echo "Whenever the file appears, executes its content as a command,"
  echo "renames it to <file>.<timestamp>.bak, and keeps monitoring."
  exit 0
fi

TARGET_FILE="$1"
SERVICE_NAME="command-hook"
MONITOR_SCRIPT="$HOME/.local/bin/${SERVICE_NAME}-monitor"
OS="$(uname -s)"

mkdir -p "$(dirname "$MONITOR_SCRIPT")"

# --- Create the monitoring script ---
cat > "$MONITOR_SCRIPT" <<'EOF'
#!/usr/bin/env bash
TARGET_FILE="$1"

echo "Monitoring $TARGET_FILE..."

while true; do
  if [[ -f "$TARGET_FILE" ]]; then
    cmd=$(cat "$TARGET_FILE")
    timestamp=$(date +%Y%m%d_%H%M%S)
    command_file="${TARGET_FILE}.$timestamp.request"
    response_file="${TARGET_FILE}.$timestamp.response"

    echo "Detected file. Executing command [$timestamp]: $cmd"
    echo "Will report back the output to: $response_file"
    mv "$TARGET_FILE" "$command_file"
    bash --noprofile --norc -c "$cmd" > "$response_file"
  fi
  sleep 2
done
EOF

chmod +x "$MONITOR_SCRIPT"

# --- OS-specific installation ---
if [[ "$OS" == "Linux" ]]; then
  UNIT_FILE="$HOME/.config/systemd/user/$SERVICE_NAME.service"
  mkdir -p "$(dirname "$UNIT_FILE")"
  if [[ -f "$UNIT_FILE" ]]; then
    echo "Error: $SERVICE_NAME is already installed."
    exit 1
  fi

  cat > "$UNIT_FILE" <<EOF
[Unit]
Description=Command Hook Monitor

[Service]
ExecStart=$MONITOR_SCRIPT "$TARGET_FILE"
Restart=always

[Install]
WantedBy=default.target
EOF

  systemctl --user enable "$SERVICE_NAME.service" --now
  echo "✅ Installed $SERVICE_NAME as a user service."
  echo "To see logs: journalctl --user -u $SERVICE_NAME -f"

elif [[ "$OS" == "Darwin" ]]; then
  PLIST="$HOME/Library/LaunchAgents/com.user.${SERVICE_NAME}.plist"
  if [[ -f "$PLIST" ]]; then
    echo "Error: $SERVICE_NAME is already installed."
    exit 1
  fi

  cat > "$PLIST" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" \
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key><string>com.user.${SERVICE_NAME}</string>
  <key>ProgramArguments</key>
  <array>
    <string>${MONITOR_SCRIPT}</string>
    <string>${TARGET_FILE}</string>
  </array>
  <key>RunAtLoad</key><true/>
  <key>KeepAlive</key><true/>
  <key>StandardOutPath</key><string>${HOME}/Library/Logs/${SERVICE_NAME}.log</string>
  <key>StandardErrorPath</key><string>${HOME}/Library/Logs/${SERVICE_NAME}.err</string>
</dict>
</plist>
EOF

  launchctl load "$PLIST"
  echo "✅ Installed $SERVICE_NAME LaunchAgent."
  echo "Logs: tail -f ~/Library/Logs/${SERVICE_NAME}.log"

elif [[ "$OS" =~ MINGW|MSYS|CYGWIN|Windows_NT ]]; then
  TASK_NAME="command-hook"
  SCRIPT_PATH="$MONITOR_SCRIPT"
  if schtasks /Query /TN "$TASK_NAME" >/dev/null 2>&1; then
    echo "Error: $TASK_NAME already installed."
    exit 1
  fi

  cmd.exe "schtasks /Create /SC ONLOGON /RL HIGHEST /TN \"$TASK_NAME\" /TR \"\"$SCRIPT_PATH\" \"$TARGET_FILE\"\" /F"
  echo "✅ Installed Windows Scheduled Task $TASK_NAME."

else
  echo "Unsupported OS: $OS"
  exit 1
fi
